;; -*- lisp -*-
(in-package :stumpwm)

(setf *default-package* :stumpwm)

                    ;(load "~/build/stumpwm/contrib/battery.lisp")
                    ;(load "~/build/stumpwm/contrib/aumix.lisp")
                    ;(load "~/build/stumpwm/contrib/battery-portable.lisp")
                    ;(load "~/build/stumpwm/contrib/cpu.lisp")
                    ;(load "~/build/stumpwm/contrib/surfraw.lisp")


(set-contrib-dir "~/build/stumpwm/contrib")

(mapcar #'load-module '("cpu"
            "mem"
            "battery-portable"
            "net"
            "wifi"
            "surfraw"
            "notifications"
            ;"swank-loader"
            "disk"))

(defparameter terminal "terminator")

(set-font "-*-courier-medium-r-normal--18-*-*-*-*-*-*-*")

(set-prefix-key       (kbd "C-z"))
(set-focus-color      "DarkRed")
(set-unfocus-color    "black")
(set-win-bg-color     "black")
(set-fg-color         "lightgray")
(set-bg-color         "black")
(set-normal-gravity   :center)
(setq *shell-program* (stumpwm::getenv "SHELL"))
(defvar *regular-map* "aoeuid")
(defvar *shifted-map* "AOEUID")
(defvar *alphabet*    "abcdefghijklmnopqrstuvwxyz")
(defvar *clipboard*   (make-hash-table :test 'equalp))

;; Options
(setf
 *normal-border-width*             1
 *window-border-style*             :thin
 *startup-message*                 nil
 *frame-number-map*                "asdfgqwertzxcvbpoiulkjh"
 *window-number-map*               "asdfgqwert"
 *group-number-map*                "asdfgqwert"
 *mouse-focus-policy*              :click
 *message-window-gravity*          :bottom-right
 *input-window-gravity*            :bottom-right
 *run-or-raise-all-groups*         T
 *input-history-ignore-duplicates* T
 *mode-line-background-color*      "black"
 *mode-line-foreground-color*      "white"
 *mode-line-border-color*          "DarkRed"
 *mode-line-timeout*               1
 *mode-line-position*              :top
 *time-format-string-default*      "%a %m/%d/%Y %I:%M%p"
 *time-modeline-string*            "%a %m/%d/%Y %I:%M%p"
 *group-format*                    "%n%s%t"
 *window-format*                   "«%n%s%m%10c»")

(setf *screen-mode-line-format*
      (list "[ %D | %c (%f) %t | %M | BAT: %B ]"))
      ;(list (stumpwm:run-shell-command "acpi")))
(enable-mode-line (current-screen) (current-head) T)

;; Hooks
(setf *command-mode-start-hook*
      (list (lambda () (grab-pointer (current-screen)))))

(setf *command-mode-end-hook*
      (list (lambda () (ungrab-pointer))))

(setf *urgent-window-hook*
      (list (lambda (target)
          (run-shell-command
           (format nil "notify-send 'Alert' '«~a ~a» on ~a'"
               (window-number target)
               (window-title target)
               (group-name (window-group target)))))))

;; TODO is there any useful thing to have on 2/3?
;; TODO be really nice to have click on window name to focus it
;;(setf *mode-line-click-hook*
;;(list #'(lambda (mode-line button x y)
;;(declare (ignore mode-line x y))
;;(cond ((eq button 5) (run-shell-command "aumix -v -1"))
;;((eq button 4) (run-shell-command "aumix -v +1"))
;;((eq button 1) (run-shell-command "/home/batman/bin/dzen/dzen-cal.sh"))))))

;; Keyboard on topmap to show the key pressed
(defun key-press-hook (key key-seq cmd)
  (declare (ignore key))
  (unless (stringp cmd)
    (message "~A" (print-key-seq (reverse key-seq)))))

(defmacro replace-hook (hook fn)
  `(remove-hook ,hook ,fn)
  `(add-hook ,hook ,fn))
(replace-hook *key-press-hook* 'key-press-hook)


;; Commands
;; TODO google, imdb, cpan, vim searches
;; See http://www.mygooglest.com/fni/stumpwm.html
(defun add-move-keys (m key-format command-normal command-shift)
  (dotimes (i (length *regular-map*))
    (define-key m
    (kbd (format nil key-format (char *regular-map* i)))
      (format nil command-normal (elt *group-number-map* i)))
    (define-key m
    (kbd (format nil key-format (char *shifted-map* i)))
      (format nil command-shift (elt *group-number-map* i)))))

(defun add-clipboard-keys (m command)
  (loop for x across *alphabet* do
       (define-key m
       (kbd (format nil "~A" x))
     (format nil "~A ~A" command x))))

;; Define the background window
(defvar *background-image-path* "~/Pictures/wall/")
(defun select-random-background-image ()
  "Select a random image"
  (let ((file-list (directory (concatenate 'string *background-image-path* "*.jpg")))
    (*random-state* (make-random-state t)))
    (namestring (nth (random (length file-list)) file-list))))


(defun shell-command (command)
  "Run a shell command and display output to screen.
    This must be used in a functional side-effects-free style! If a program does not
    exit of its own accord, Stumpwm might hang!"
  (check-type command string)
  (echo-string (current-screen) (stumpwm::run-shell-command command t)))

(defcommand my-shell-command (command) ((:string "sh$ "))
        (check-type command string)
        (shell-command command))

(defcommand change-bg () ()
        (run-shell-command (concatenate 'string "xsetbg -border black -fullscreen -onroot " (select-random-background-image))))


(defcommand run-top () ()
        (stumpwm::my-shell-command "top -b -n 1 -c -d 1"))

(defcommand dmenu () ()
        "Runs the dmenu program"
        (run-shell-command "dmenu_run -i -nb '#000000' -nf '#777777' -sb '#770000' -sf '#ffffff' -fn '-*-courier-medium-r-normal-*-25-*-*-*-*-*-*-*' -p '> '"))

(defcommand emacs () ()
        "Start emacs unless it is already running, in which case focus it."
        (run-or-raise "emacs" '(:class "Emacs")))

(defcommand firefox () ()
        "Start firefox unless it is already running, in which case focus it."
        (run-or-raise "firefox" '(:class "Firefox")))

(defcommand chromium-browser () ()
        "Start chromium-browser unless it is already running, in which case focus it."
        (run-or-raise "chromium-browser" '(:class "Chromium-browser")))

(defcommand gnome-terminal () ()
        "Start gnome-terminal unless it is already running, in which case focus it."
        (run-or-raise "gnome-terminal" '(:class "Gnome-term")))

(defcommand thunderbird () ()
        "Start thunderbird unless it is already running, in which case focus it."
        (run-or-raise "thunderbird" '(:class "Thunderbird")))

(defcommand pidgin () ()
        "Start pidgin unless it is already running, in which case focus it."
        (run-or-raise "pidgin" '(:class "Pidgin")))

(defcommand man (man) ((:string "Man: "))
        "Lookup a command in man"
        (run-shell-command (format nil "~A -e sh -c 'man ~A'" terminal man)))

(defcommand exec-in-terminal (program) ((:rest "urxvt -e: "))
        "Run in terminal"
        (run-shell-command (format nil "urxvt -e ~A" program)))

(defcommand scratchpad () ()
        "Toggle the scratchpad"
        (run-commands (if (equal "*******" (group-name (current-group)))
                  "gother"
                  "gselect *******")))

(defcommand clipboard-yank (key) ((:string "Key:"))
        "Yanks the current x-selection into the clipboard specified"
        (setf (gethash key *clipboard*) (stumpwm:get-x-selection))
        (run-commands "abort"))

(defcommand clipboard-put (key) ((:string "Key:"))
        "Pastes the value in the clipboard specified"
        (window-send-string (values (gethash key *clipboard*)))
        (run-commands "abort"))

(defcommand sshot (filename) ((:string "File: "))
        "Take a screenshot"
        (run-shell-command (format nil "import ~A" filename)))

(defcommand screenshot (filename) ((:string "File: "))
        "Take a screenshot"
        (run-shell-command (format nil "exec import -window root png:$HOME/Pictures/sshots/~A_$(date +%F_%H-%M-%S).png" filename)))

(defcommand part-screenshot (filename) ((:string "File: "))
        "Take a partial screenshot"
        (run-shell-command (format nil "scrot -s $HOME/Pictures/sshots/~A_$(date +%F_%H-%M-%S).png" filename)))

(defcommand alsamix () ()
        "run alsamixer"
        (run-shell-command "exec xterm -rv -e alsamixer"))

                    ;TODO does not echo to screen properly...
                    ;(defcommand show-battery ()
                    ;(echo-string (current-screen) (run-shell-command "acpi" t)))

;; Groups
(run-commands
 "grename main"
 "gnewbg www"
 "gnewbg chat"
 "gnewbg mail"
 "gnewbg term"
 "gnewbg vim"
 "gnewbg emacs"
 "gnewbg *******")

;; add more commands here to run at startup
(defcommand startup () ()
        (run-shell-command "~/config/bin/swapCaps")
        (run-commands "change-bg"))
                    ;(run-commands
                    ;"change-bg"
                    ;"startup"
                    ;"gnext"
                    ;"firefox"
                    ;"gnext"
                    ;"pidgin"
                    ;"gnext")
                    ;"thunderbird"))

(run-commands "startup")

;; Key bindings
;; TOP
(add-move-keys *top-map* "s-~A" "gselect ~A" "gmove ~A")
(define-key *top-map* (kbd "M-Tab") "next")
(define-key *top-map* (kbd "M-F1") "gprev")
(define-key *top-map* (kbd "M-F2") "gnext")
(define-key *top-map* (kbd "M-F3") "gother")
(define-key *top-map* (kbd "M-F4") "delete")
(define-key *top-map* (kbd "XF86AudioRaiseVolume") "exec aumix -v +1")
(define-key *top-map* (kbd "XF86AudioLowerVolume") "exec aumix -v -1")
(define-key *top-map* (kbd "s-Prior") "exec aumix -v +1")
(define-key *top-map* (kbd "s-Next") "exec aumix -v -1")
(define-key *top-map* (kbd "XF86AudioMute") "exec aumute")
(define-key *top-map* (kbd "s-Scroll_Lock") "exec xlock")
(define-key *top-map* (kbd "s-ESC") "scratchpad")
;;(define-key *top-map* (kbd "C-s-End") "exec sleep 1 && xset dpms force off")
;;(define-key *top-map* (kbd "s-Home") "exec setxkbmap us -option")
;;(define-key *top-map* (kbd "s-End") "exec setxkbmap dvorak -option caps:swapescape")
(define-key *top-map* (kbd "C-z") "command-mode")

;; Subgroup HELP
(setf *help-map*
      (let ((m (make-sparse-keymap)))
    (define-key m (kbd "m") "man")
    (define-key m (kbd "v") "describe-variable")
    (define-key m (kbd "c") "describe-command")
    (define-key m (kbd "f") "describe-function")
    (define-key m (kbd "k") "describe-key")
    (define-key m (kbd "w") "where-is")
    (define-key m (kbd "r") "loadrc")
    (define-key m (kbd "Escape") '*root-map*)
    m))

(setf *surfraw-map*
      (let ((m (make-sparse-keymap)))
    (define-key m (kbd "g") "sr-google")
    (define-key m (kbd "y") "sr-yubnub")
    (define-key m (kbd "Escape") '*root-map*)
    m))

;; Subgroup EXEC
(defvar *exec-map*
  (let ((m (make-sparse-keymap)))
    (define-key m (kbd "v") "exec gvim")
    (define-key m (kbd "F") "exec firefox -ProfileManager -no-remote")
    (define-key m (kbd "f") "firefox")
    (define-key m (kbd "g") "gnome-terminal")
    (define-key m (kbd "c") "chromium-browser")
    (define-key m (kbd "t") "thunderbird")
    (define-key m (kbd "p") "pidgin")
    (define-key m (kbd "r") "dmenu")
    (define-key m (kbd "e") "emacs")
    (define-key m (kbd "l") "exec xlock")
    (define-key m (kbd "Print") "exec xlock")
    (define-key m (kbd "a") "alsamix")
    (define-key m (kbd "S") "screenshot")
    (define-key m (kbd "s") "part-screenshot")
    (define-key m (kbd "b") "change-bg")
    (define-key m (kbd "n") '*notifications-map*)
    ;;(define-key m (kbd "r") "exec pydmenu.py")
    ;;(define-key m (kbd "c") "exec wxmaxima")
    ;;(define-key m (kbd "e") (format nil "exec ~a -e mc" terminal))
    ;;(define-key m (kbd "F") "exec chromium")
    ;;(define-key m (kbd "Home") "exec setxkbmap us -option")
    ;;(define-key m (kbd "End") "exec setxkbmap dvorak -option caps:swapescape")
    ;;(define-key m (kbd "p") "exec GTK2_RC_FILES=/home/laptop/.themes/Darkilouche/gtk-2.0/gtkrc pidgin")
    (define-key m (kbd "Escape") '*root-map*)
    m))

;; Subgroup GROUP
(setf *groups-map*
      (let ((m (make-sparse-keymap)))
    (define-key m (kbd "'") "grouplist")
    (define-key m (kbd "\"") "gselect")
    (define-key m (kbd "g") "gother")
    (define-key m (kbd "C-g") "gother")
    (define-key m (kbd "G") "vgroups")
    (define-key m (kbd "c") "gnew")
    (define-key m (kbd "C") "gnew-float")
    (define-key m (kbd "n") "gnext")
    (define-key m (kbd "p") "gprev")
    (define-key m (kbd "C-n") "gnext")
    (define-key m (kbd "C-p") "gprev")
    (define-key m (kbd "SPC") "gnext")
    (define-key m (kbd "C-SPC") "gprev")
    (define-key m (kbd "C-N") "gnext-with-window")
    (define-key m (kbd "C-P") "gprev-with-window")
    (define-key m (kbd "m") "gmove")
    (define-key m (kbd "M") "gmove-marked")
    (define-key m (kbd "k") "gkill")
    (define-key m (kbd "R") "grename")
    (define-key m (kbd "Escape") '*root-map*)
    (add-move-keys m "~A" "gselect ~A" "gmove ~A")
    m))

;; Subgroup CLIPBOARD
(defvar *clipboard-yank-map*
  (let ((m (make-sparse-keymap)))
    (add-clipboard-keys m "clipboard-yank")
    (define-key m (kbd "Escape") '*root-map*)
    m))

(defvar *clipboard-put-map*
  (let ((m (make-sparse-keymap)))
    (add-clipboard-keys m "clipboard-put")
    (define-key m (kbd "Escape") '*root-map*)
    m))

;; Subgroup STATUS
(defvar *status-map*
  (let ((m (make-sparse-keymap)))
    (define-key m (kbd "a") "time")
    (define-key m (kbd "C-a") "time")
    (define-key m (kbd "b") "battery")
    (define-key m (kbd "C-b") "battery")
    ;;(define-key m (kbd "c") "calendar")
    ;;(define-key m (kbd "C-c") "calendar")
    (define-key m (kbd "v") "qvolume")
    (define-key m (kbd "C-v") "qvolume")
    (define-key m (kbd "t") "run-top")
    (define-key m (kbd "C-t") "run-top")
    (define-key m (kbd "Escape") '*root-map*)
    m))

;; Subgroup WINDOW
(defvar *window-map*
  (let ((m (make-sparse-keymap)))
    (dotimes (i (length *regular-map*))
      (define-key m
      (kbd (format nil "~a" (char *regular-map* i)))
    (format nil "select-window-by-number ~A" (char *window-number-map* i)))
      (define-key m
      (kbd (format nil "~a" (char *shifted-map* i)))
    (format nil "pull ~A" (char *window-number-map* i))))
    (define-key m (kbd "w") "windows")
    m))

                    ; Windows
(define-key *root-map* (kbd "&") "run-top")
(define-key *root-map* (kbd "o") "only")
(define-key *root-map* (kbd "C-o") "only")
(define-key *root-map* (kbd "s") "vsplit")
(define-key *root-map* (kbd "C-s") "vsplit")
(define-key *root-map* (kbd "v") "hsplit")
(define-key *root-map* (kbd "C-v") "hsplit")
                    ; Frames
(define-key *root-map* (kbd "Left") "move-focus left")
(define-key *root-map* (kbd "Right") "move-focus right")
(define-key *root-map* (kbd "Up") "move-focus up")
(define-key *root-map* (kbd "Down") "move-focus down")
(define-key *root-map* (kbd "S-Left") "move-window left")
(define-key *root-map* (kbd "S-Right") "move-window right")
(define-key *root-map* (kbd "S-Up") "move-window up")
(define-key *root-map* (kbd "S-Down") "move-window down")
(define-key *root-map* (kbd "h") "move-focus left")
(define-key *root-map* (kbd "l") "move-focus right")
(define-key *root-map* (kbd "j") "move-focus down")
(define-key *root-map* (kbd "k") "move-focus up")
(define-key *root-map* (kbd "C-h") "move-focus left")
(define-key *root-map* (kbd "C-l") "move-focus right")
(define-key *root-map* (kbd "C-j") "move-focus down")
(define-key *root-map* (kbd "C-k") "move-focus up")
(define-key *root-map* (kbd "H") "move-window left")
(define-key *root-map* (kbd "L") "move-window right")
(define-key *root-map* (kbd "J") "move-window down")
(define-key *root-map* (kbd "K") "move-window up")
(define-key *root-map* (kbd "M-l") "redisplay")
(define-key *root-map* (kbd "=") "balance-frames")
(define-key *root-map* (kbd "'") "windowlist")
(define-key *root-map* (kbd "\"") "select")
(define-key *root-map* (kbd "-") "fclear")
(define-key *root-map* (kbd "C-t") "other")
(define-key *root-map* (kbd "C-r") "iresize")
(define-key *root-map* (kbd "C-w") "windows")
(define-key *root-map* (kbd "f") "fselect")
(define-key *root-map* (kbd "F") "curframe")
(define-key *root-map* (kbd "SPC") "next")
(define-key *root-map* (kbd "C-SPC") "prev")
(define-key *root-map* (kbd "TAB") "fnext")
(define-key *root-map* (kbd "S-TAB") "fprev")
(define-key *root-map* (kbd "C-n") "pull-hidden-next")
(define-key *root-map* (kbd "C-p") "pull-hidden-previous")
                    ; Submaps
(define-key *root-map* (kbd "F1") '*help-map*)
(define-key *root-map* (kbd "e") '*exec-map*)
(define-key *root-map* (kbd "C-e") '*exec-map*)
(define-key *root-map* (kbd "g") '*groups-map*)
(define-key *root-map* (kbd "C-g") '*groups-map*)
(define-key *root-map* (kbd "y") '*clipboard-yank-map*)
(define-key *root-map* (kbd "p") '*clipboard-put-map*)
(define-key *root-map* (kbd "a") '*status-map*)
(define-key *root-map* (kbd "C-a") '*status-map*)
(define-key *root-map* (kbd "w") '*window-map*)
(define-key *root-map* (kbd "C-w") '*window-map*)
(define-key *root-map* (kbd "S") '*surfraw-map*)
(define-key *root-map* (kbd "r") '*resize-map*)
(define-key *root-map* (kbd "C-r") '*resize-map*)

                    ; Exec
(define-key *root-map* (kbd "V") "exec gvim")
(define-key *root-map* (kbd "Return") (format nil "exec ~A" terminal))
(define-key *root-map* (kbd "C-Return") (format nil "exec gnome-terminal"))
                    ; Other
(define-key *root-map* (kbd "`") "exec-in-terminal")
(define-key *root-map* (kbd "#") "mark")
(define-key *root-map* (kbd ":") "eval")
(define-key *root-map* (kbd ";") "colon")
(define-key *root-map* (kbd "A") "title")
(define-key *root-map* (kbd "Escape") "abort")
(define-key *root-map* (kbd "F11") "fullscreen")
(define-key *root-map* (kbd "d") "delete")
(define-key *root-map* (kbd "C-d") "delete")
(define-key *root-map* (kbd "M-l") "redisplay")
(define-key *root-map* (kbd "N") "number")
(define-key *root-map* (kbd "R") "remove")
(define-key *root-map* (kbd "b") "banish")
(define-key *root-map* (kbd "C-b") "ratwarp 500 5")
(define-key *root-map* (kbd "B") "ratwarp 500 500")
(define-key *root-map* (kbd "i") "info")
(define-key *root-map* (kbd "m") "lastmsg")
(define-key *root-map* (kbd "t") "send-escape")
(define-key *root-map* (kbd "u") "next-urgent")


;; Input map
(define-key *input-map* (kbd "S-Insert") 'input-yank-selection)
(define-key *input-map* (kbd "S-SPC")
  #'(lambda (input c)
      (declare (ignore c))
      (input-insert-char input #\Space)))

;; Resize map
(flet ((dk (k c)
     (define-key *resize-map* k (format nil c (* 5 *resize-increment*)))))
  (dk (kbd "S-Right") "resize ~D 0")
  (dk (kbd "S-Left") "resize -~D 0")
  (dk (kbd "S-Down") "resize 0 ~D")
  (dk (kbd "S-Up") "resize 0 -~D")
  (dk (kbd "L") "resize ~D 0")
  (dk (kbd "H") "resize -~D 0")
  (dk (kbd "J") "resize 0 ~D")
  (dk (kbd "K") "resize 0 -~D"))

;; Startup
;;(run-shell-command "img.sh") ; Really small random image displayer
;;(run-shell-command "stalonetray")
;;(run-shell-command "nm-applet --sm-disable")

;; vim:ft=lisp
